package org.example.entity.creatures;

import org.example.entity.Entity;
import org.example.entity.fieldobject.Grass;
import org.example.field.Cell;
import org.example.field.FieldOfPlay;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

public class Predator extends Creature {
    private int attack;

    ///bug
    public Predator(int attack, int speed) {
        this.setName("üêØ");
        setAttack(attack);
        setSpeed(speed);
    }

    public int getAttack() {
        return attack;
    }

    public void setAttack(int attack) {
        this.attack = attack;
    }

    @Override
    public String toString() {
        return "Predator{" +
                "name='" + getName() + '\'' +
                ", attack=" + getAttack() +
                ", speed=" + getSpeed() +
                '}';
    }

    @Override
    public void makeMove(FieldOfPlay field, Cell cell) {
        //–æ—á–µ—Ä–µ–¥—å —Å –∫–ª–µ—Ç–∫–∞–º–∏ –ø–æ –º–µ—Ä–µ –∏—Ö –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
        Queue<ArrayList<Cell>> lineOfCellsArray = new LinkedList<>();
        ArrayList<Cell> cellLinkedList = new ArrayList<>();

        //–ø–æ—Å–µ—â–µ–Ω–Ω—ã–µ –∫–ª–µ—Ç–∫–∏
        List<Cell> visitedCells = new LinkedList<>();

        findingOfPath(lineOfCellsArray, cellLinkedList, visitedCells, cell, field, Herbivore.class);

        //–ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—É—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        ArrayList<Cell> cells = lineOfCellsArray.stream()
                .reduce((e1, e2) -> e2)
                .orElse(null);


        // –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–æ–≥–¥–∞ —Ö–∏—â–Ω–∏–∫ –º–æ–∂–µ—Ç –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –∂–µ—Ä—Ç–≤—ã –∏
        // —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –µ–º—É –∞—Ç–∞–∫–∏.
        //–µ—Å–ª–∏ –∂–µ—Ä—Ç–≤–∞ —Å—Ç–æ–∏—Ç –≤–ø—Ä–∏—Ç—ã–∫
        if (cells != null && !cells.isEmpty()) {
            if (cells.size() == 2) {
                //—É–±–∏–≤–∞–µ–º –∂–µ—Ä—Ç–≤—É –∏–ª–∏ —É–º–µ–Ω—å—à–∞–µ–º –•–ü –∂–µ—Ä—Ç–≤—ã
                if (getAttack() >= ((Herbivore) field.getEntity(cells.get(cells.size() - 1))).getHp()) {
                    field.updateEntity(cells.get(cells.size() - 1), field.getEntity(cell));
                    field.remove(cell);
                } else {
                    ((Herbivore) field.getEntity(cells.get(cells.size() - 1))).setHp(((Herbivore) field.
                            getEntity(cells.get(cells.size() - 1))).getHp() - getAttack());
                }
                //—Ö–≤–∞—Ç–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–æ–π—Ç–∏ –¥–æ –∂–µ—Ä–≤—ã –∏ –∞—Ç–∞–∫–æ–≤–∞—Ç—å
            } else if (cells.size() - 1 - getSpeed() <= 0) {
                if (getAttack() >= ((Herbivore) field.getEntity(cells.get(cells.size() - 1))).getHp()) {
                    field.updateEntity(cells.get(cells.size() - 1), field.getEntity(cell));
                    field.remove(cell);
                } else {
                    field.updateEntity(cells.get(cells.size() - 2), field.getEntity(cell));
                    ((Herbivore) field.getEntity(cells.get(cells.size() - 1))).setHp(((Herbivore) field.
                            getEntity(cells.get(cells.size() - 1))).getHp() - getAttack());
                    field.remove(cell);
                }
                //–ø—Ä–æ—Å—Ç–æ –¥–≤–∏–≥–∞–µ–º—Å—è –∫ –∂–µ—Ä—Ç–≤–µ
            } else {
                field.add(cells.get(((Predator) field.getEntity(cell)).getSpeed()), field.getEntity(cell));
                field.remove(cell);
            }
        }
    }

}
